// Copyright 2016-2020, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Text.Json;
using Pulumi.Kubernetes.Yaml;

namespace Pulumi.Kubernetes.Helm
{
    public class BaseChartArgs : ResourceArgs
    {
        private InputList<string>? _apiVersions;

        /// <summary>
        /// The optional kubernetes api versions used for Capabilities.APIVersions.
        /// </summary>
        public InputList<string> ApiVersions
        {
            get => _apiVersions ??= new InputList<string>();
            set => _apiVersions = value;
        }

        /// <summary>
        /// The optional namespace to install chart resources into.
        /// </summary>
        public Input<string>? Namespace { get; set; }

        private InputMap<object>? _values;

        /// <summary>
        /// Overrides for chart values.
        /// </summary>
        public InputMap<object> Values
        {
            get => _values ??= new InputMap<object>();
            set => _values = value;
        }

        private List<TransformationAction>? _transformations;

        /// <summary>
        /// Optional array of transformations to apply to resources that will be created by this chart prior to
        /// creation. Allows customization of the chart behaviour without directly modifying the chart itself.
        /// </summary>
        public List<TransformationAction> Transformations
        {
            get => _transformations ??= new List<TransformationAction>();
            set => _transformations = value;
        }

        /// <summary>
        /// An optional prefix for the auto-generated resource names.
        /// Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
        /// </summary>
        public string? ResourcePrefix { get; set; }
    }

    public class ChartArgs : BaseChartArgs
    {
        /// <summary>
        /// The repository name of the chart to deploy.
        /// Example: "stable"
        /// </summary>
        public Input<string>? Repo { get; set; }

        /// <summary>
        /// The name of the chart to deploy.  If <see cref="Repo" /> is provided, this chart
        /// name will be prefixed by the repo name.
        /// Example: Repo: "stable", Chart: "nginx-ingress" -> "stable/nginx-ingress"
        /// Example: Chart: "stable/nginx-ingress" -> "stable/nginx-ingress"
        /// </summary>
        public Input<string> Chart { get; set; } = null!;

        /// <summary>
        /// The version of the chart to deploy. If not provided, the latest version will be deployed.
        /// </summary>
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Additional options to customize the fetching of the Helm chart.
        /// </summary>
        public Input<ChartFetchArgs>? FetchOptions { get; set; }
    }

    public class LocalChartArgs : BaseChartArgs
    {
        /// <summary>
        /// The path to the chart directory which contains the `Chart.yaml` file.
        /// </summary>
        public string Path { get; set; } = null!;
    }

    /// <summary>
    /// Additional options to customize the fetching of the Helm chart.
    /// </summary>
    public class ChartFetchArgs
    {
        /// <summary>
        /// Specific version of a chart. Without this, the latest version is fetched.
        /// </summary>
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Verify certificates of HTTPS-enabled servers using this CA bundle.
        /// </summary>
        public Input<string>? CAFile { get; set; }

        /// <summary>
        /// Identify HTTPS client using this SSL certificate file.
        /// </summary>
        public Input<string>? CertFile { get; set; }

        /// <summary>
        /// Identify HTTPS client using this SSL key file.
        /// </summary>
        public Input<string>? KeyFile { get; set; }

        /// <summary>
        /// Location to write the chart. If this and tardir are specified, tardir is appended to this
        /// (default ".").
        /// </summary>
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// Keyring containing public keys (default "/Users/alex/.gnupg/pubring.gpg").
        /// </summary>
        public Input<string>? Keyring { get; set; }

        /// <summary>
        /// Chart repository password.
        /// </summary>
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Chart repository url where to locate the requested chart.
        /// </summary>
        public Input<string>? Repo { get; set; }

        /// <summary>
        /// If untar is specified, this flag specifies the name of the directory into which the chart is
        /// expanded (default ".").
        /// </summary>
        public Input<string>? UntarDir { get; set; }

        /// <summary>
        /// Chart repository username.
        /// </summary>
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Location of your Helm config. Overrides $HELM_HOME (default "/Users/alex/.helm").
        /// </summary>
        public Input<string>? Home { get; set; }

        /// <summary>
        /// Use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is
        /// ignored.
        /// </summary>
        public Input<bool>? Devel { get; set; }

        /// <summary>
        /// Fetch the provenance file, but don't perform verification.
        /// </summary>
        public Input<bool>? Prov { get; set; }

        /// <summary>
        /// If set to false, will leave the chart as a tarball after downloading.
        /// </summary>
        public Input<bool>? Untar { get; set; }

        /// <summary>
        /// Verify the package against its signature.
        /// </summary>
        public Input<bool>? Verify { get; set; }
    }
    public class LowerCaseNamingPolicy : JsonNamingPolicy
    {
        public override string ConvertName(string name) =>
            name.ToLower();
    }
}
